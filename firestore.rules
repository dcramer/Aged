function isYearValue(value, nullable) {
  return (value == null && nullable) || (value is int && value > 1900 && value < 2100);
}

function isAgeValue(value, nullable) {
  return (value == null && nullable) || (value is int && value > 0 && value < 100);
}

function isRatingValue(value) {
  return value is number && value >= 0 && value <= 5
}

function isBottleRef(database, value) {
  return exists(/databases/$(database)/documents/bottles/$(value))
}

function isDistilleryRef(database, value) {
  return exists(/databases/$(database)/documents/distilleries/$(value))
}

function isLocationRef(database, value) {
  return exists(/databases/$(database)/documents/locations/$(value))
}

function isUserRef(database, value) {
  return exists(/databases/$(database)/documents/users/$(value))
}

function isUser(database, resource) {
  return resource.data.keys().hasAll(['email', 'displayName', 'photoURL', 'createdAt'])
    && resource.data.email is string
    && resource.data.email.size() < 200
    && resource.data.displayName is string
    && resource.data.displayName.size() < 200
    && resource.data.photoURL is string
}

function isBottle(database, resource) {
  return resource.data.keys().hasAll([
      'userAdded',
      'createdAt',
      'name',
      'distillery'
    ])
    && isUserRef(database, resource.data.userAdded)
    && isDistilleryRef(database, resource.data.distillery)
}

function isDistillery(database, resource) {
  return resource.data.keys().hasAll([
      'userAdded',
      'createdAt',
      'name',
      'country',
      'region'
    ])
    && isUserRef(database, resource.data.userAdded)
}

function isLocation(database, resource) {
  return resource.data.keys().hasAll(['name', 'latlng'])
    && resource.data.size() == 2
    && resource.data.name is string
    && resource.data.name.size() < 200
    && resource.data.latlng is latlng
}

function isFriend(database, resource) {
  return resource.data.keys().hasAll(['createdAt'])
    && resource.data.size() == 1
    // && resource.data.mutual is bool
}

function isCheckin(database, resource) {
  return resource.data.keys().hasAll(['createdAt', 'bottle', 'notes', 'user', 'rating', 'location', 'flavorProfile', 'friends'])
    && isUserRef(database, resource.data.user)
    && isBottleRef(database, resource.data.bottle)
    && (
      resource.data.notes == null ||
      (resource.data.notes is string && resource.data.notes.size() < 200)
    )
    && (
      resource.data.location == null ||
      isLocationRef(database, resource.data.location)
    )
    && isRatingValue(resource.data.rating)
    && resource.data.flavorProfile is list
    && resource.data.friends is list
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId
                    && isUser(database, request.resource)
                    && request.resource.data.createdAt <= request.time;
      allow update: if request.auth.uid == userId
                    && isUser(database, request.resource)
                    && request.resource.data.createdAt == resource.data.createdAt;
    }
    match /users/{userId}/friends/{friendId} {
      allow read: if request.auth.uid == userId || request.auth.uid == friendId;
      allow create: if (request.auth.uid == userId || request.auth.uid == friendId)
                    && isFriend(database, request.resource)
                    && exists(/databases/$(database)/documents/users/$(friendId))
                    && request.resource.data.createdAt <= request.time;
      allow update: if request.auth.uid == userId
                    && request.resource.data.createdAt == resource.data.createdAt
                    && exists(/databases/$(database)/documents/users/$(friendId));
      allow delete: if request.auth.uid == userId;
    }
    match /bottles/{bottleId} {
      allow read: if request.auth.uid != null
      allow create: if request.auth.uid != null
                    && request.auth.uid == request.resource.data.userAdded
                    && isBottle(database, request.resource)
                    && request.resource.data.createdAt <= request.time;
      allow update: if request.auth.uid != null
                    && request.auth.uid == resource.data.userAdded
                    && isBottle(database, request.resource)
                    && request.resource.data.userAdded == request.resource.data.userAdded
                    && request.resource.data.createdAt == resource.data.createdAt;
    }
    match /locations/{locationId} {
      allow read: if request.auth.uid != null;
    }
    match /distilleries/{distilleryId} {
      allow read: if request.auth.uid != null;
      allow create: if request.auth.uid != null
                    && request.auth.uid == request.resource.data.userAdded
                    && isDistillery(database, request.resource)
                    && request.resource.data.createdAt <= request.time;
    }
    match /checkins/{checkinId} {
      allow read, delete: if request.auth.uid == resource.data.user;
      allow create: if request.auth.uid == request.resource.data.user
                    && isCheckin(database, request.resource)
                    && request.resource.data.createdAt <= request.time;
      allow update: if request.auth.uid == resource.data.user
                    && request.resource.data.user == resource.data.user
                    && request.resource.data.createdAt == resource.data.createdAt
                    && isCheckin(database, request.resource);
    }
  }
}
