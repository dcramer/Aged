service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null
    }

    function isYearValue(value, nullable) {
      return (value == null && nullable) || (value is int && value > 1900 && value < 2100);
    }

    function isAgeValue(value, nullable) {
      return (value == null && nullable) || (value is int && value > 0 && value < 100);
    }

    function isRatingValue(value) {
      return value is number && value >= 0 && value <= 5
    }

    function isBottleRef(value) {
      return exists(/databases/$(database)/documents/bottles/$(value))
    }

    function isCheckInRef(value) {
      return exists(/databases/$(database)/documents/checkins/$(value))
    }

    function isDistilleryRef(value) {
      return exists(/databases/$(database)/documents/distilleries/$(value))
    }

    function isLocationRef(value) {
      return exists(/databases/$(database)/documents/locations/$(value))
    }

    function isUserRef(value) {
      return exists(/databases/$(database)/documents/users/$(value))
    }

    function isUser() {
      return request.resource.data.keys().hasAll(['displayName', 'photoURL', 'createdAt'])
        // && request.resource.data.email is string
        // && request.resource.data.email.size() < 200
        && request.resource.data.displayName is string
        && request.resource.data.displayName.size() < 200
        && request.resource.data.photoURL is string
    }

    function isBottle() {
      return request.resource.data.keys().hasAll([
          'userAdded',
          'createdAt',
          'name',
          'distillery'
        ])
        && isUserRef(request.resource.data.userAdded)
        && isDistilleryRef(request.resource.data.distillery)
    }

    function isDistillery() {
      return request.resource.data.keys().hasAll([
          'userAdded',
          'createdAt',
          'name',
          'country',
          'region'
        ])
        && isUserRef(request.resource.data.userAdded)
    }

    function isLocation() {
      return request.resource.data.keys().hasAll(['name', 'latlng'])
        && request.resource.data.size() == 2
        && request.resource.data.name is string
        && request.resource.data.name.size() < 200
        && request.resource.data.latlng is latlng
    }

    function isFriend() {
      return request.resource.data.keys().hasAll(['createdAt'])
        && (request.resource.data.follower == null || request.resource.data.follower is bool)
        && (request.resource.data.following == null || request.resource.data.following is bool)
    }

    function isFeed() {
      return request.resource.data.keys().hasAll(['createdAt'])
    }

    function isCheckin() {
      return request.resource.data.keys().hasAll(['createdAt', 'bottle', 'notes', 'userAdded', 'rating', 'location', 'flavorProfile'])
        && isUserRef(request.resource.data.userAdded)
        && isBottleRef(request.resource.data.bottle)
        && (
          request.resource.data.notes == null ||
          (request.resource.data.notes is string && request.resource.data.notes.size() < 200)
        )
        && (
          request.resource.data.location == null ||
          isLocationRef(request.resource.data.location)
        )
        && isRatingValue(request.resource.data.rating)
        && request.resource.data.flavorProfile is list
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == userId
                    // TODO(dcramer): disabled until simulator works as testing matters more
                    // && request.resource.data.createdAt <= request.time
                    && isUser();
      allow update: if request.auth.uid == userId
                    && isUser()
                    && request.resource.data.createdAt == resource.data.createdAt;

      match /feed/{checkInId} {
        allow read: if request.auth.uid == userId;
        allow create: if request.auth.uid == userId
                      // TODO(dcramer): disabled until simulator works as testing matters more
                      // && request.resource.data.createdAt <= request.time
                      && isFeed()
                      && isCheckInRef(checkInId)
                      && get(/databases/$(database)/documents/users/$(userId)/friends/$(get(/databases/$(database)/documents/checkins/$(checkInId)).data.userAdded)).data.following;
        allow update: if false;
        allow delete: if request.auth.uid == userId;
      }

      match /friends/{friendId} {
        allow read: if request.auth.uid == userId || request.auth.uid == friendId;
        allow create: if (request.auth.uid == userId || request.auth.uid == friendId)
                      && userId != friendId
                      && isFriend()
                      && isUserRef(friendId)
                      // TODO(dcramer): disabled until simulator works as testing matters more
                      // && request.resource.data.createdAt <= request.time
                      && (
                        (request.auth.uid == friendId && !request.writeFields.hasAny(["following"]) && "follower" in request.writeFields)
                        || (request.auth.uid == userId && !request.writeFields.hasAny(["follower"]) && "following" in request.writeFields)
                      );
        allow update: if request.auth.uid == userId
                      && request.resource.data.createdAt == resource.data.createdAt
                      && (
                        (request.auth.uid == friendId && !request.writeFields.hasAny(["following"]) && "follower" in request.writeFields)
                        || (request.auth.uid == userId && !request.writeFields.hasAny(["follower"]) && "following" in request.writeFields)
                      )
                      && isUserRef(friendId);
        allow delete: if request.auth.uid == userId;
      }
    }

    match /bottles/{bottleId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.userAdded
                    // TODO(dcramer): disabled until simulator works as testing matters more
                    // && request.resource.data.createdAt <= request.time
                    && isBottle();
      // allow update: if request.auth.uid != null
      //               && request.auth.uid == resource.data.userAdded
      //               && isBottle()
      //               && request.resource.data.userAdded == request.resource.data.userAdded
      //               && request.resource.data.createdAt == resource.data.createdAt;
      allow delete, update: if false;
    }

    match /locations/{locationId} {
      allow read: if isSignedIn();
    }

    match /distilleries/{distilleryId} {
      allow read: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.userAdded
                    // TODO(dcramer): disabled until simulator works as testing matters more
                    // && request.resource.data.createdAt <= request.time
                    && isDistillery();
      allow delete, update: if false;
    }

    match /checkins/{checkinId} {
      // TODO(dcramer): we could limit reads to only friend graph if needed
      allow read: if isSignedIn();
      allow delete: if request.auth.uid == resource.data.userAdded;
      allow create: if request.auth.uid == request.resource.data.userAdded
                    // TODO(dcramer): disabled until simulator works as testing matters more
                    // && request.resource.data.createdAt <= request.time
                    && isCheckin();
      allow update: if false;
      // allow update: if request.auth.uid == resource.data.userAdded
      //               && request.resource.data.userAdded == resource.data.userAdded
      //               && request.resource.data.createdAt == resource.data.createdAt
      //               && isCheckin();
    }
  }
}
